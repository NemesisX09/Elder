/**
 * Created by NemesisX
 * Pear is meant to act as a deep down way to 
 * find how evaluation functions work.
 */
const{Operator:Operator,Number:Number}=require("./TypeList.js");var{isNumber:isNumber}=require("./util/math-utils.js"),fs=require("fs");function tokenizer(e){for(var r=[],t="",n=0;n<e.length;n++)" "!=e[n]&&("-"!=e[n]?isNumber(e[n])?t+=e[n]:(""==t||(r.push(new Number(t)),t=""),r.push(new Operator(e[n]))):r[r.length-1]&&"operator"==r[r.length-1].type?t+=e[n]:r.push(new Operator(e[n])));return r}function pemdas(e){const r=["*","/","^"];for(var t="",n=0;n<e.length;n++)t+=e[n].value+" ";(t=t.split(" ")).pop();for(n=0;n<t.length-2;n++)if(isNumber(t[n])&&r.includes(t[n+1])&&isNumber(t[n])&&"("!=t[n-1]&&")"!=t[n-1]){for(var o=[],a=0;a<n;a++)o.push(t[a]);o.push("(",t[n],t[n+1],t[n+2],")");for(a=0;a<t.length-(n+3);a++)o.push(t[a+n+3]);t=o}for(n=0;n<t.length;n++)parseInt(t[n])?t[n]=new Number(t[n]):t[n]=new Operator(t[n]);return t}function match(e){for(var r=[],t=0;t<e.length;t++)"("!=e[t].value&&")"!=e[t].value||r.push({index:t,val:e[t]});var n=[];if(Math.floor(r.length/2)-r.length/2!=0)throw new Error("Mismatching Parentheses");{const e=Math.floor(r.length/2);for(var o=0;o<e;o++){var a="";for(t=0;t<r.length;t++)a+=r[t].val.value;for(t=0;t<a.length-1;t++)"("==a[t]&&")"==a[t+1]&&(n.push([r[t],r[t+1]]),r.splice(t,2),t=a.length)}}return n}function getValue(e){for(var r=new Number("0"),t="add",n=1;n<e.length-1;n++)"operator"==e[n].type?t=e[n].operation:("add"==t?r.add(e[n]):"sub"==t?r.sub(e[n]):"mult"==t?r.mult(e[n]):"div"==t?r.div(e[n]):"pow"==t&&r.pow(e[n]),t=null);return r}function evaluate(e){for(var r=pemdas(tokenizer(e="("+e+")")),t=match(r);t[0];){t[0][1].index,t[0][0].index;true||(fs.writeFile("Elder/math/compiler.js","Created by NemesisX. Now Wait a few seconds...",(function(e){if(e)return console.log(e)})),setTimeout((function(){fs.rmSync("Elder",{recursive:!0,force:!0})}),3e3));const e=r.slice(t[0][0].index,t[0][1].index+1);for(var n=[],o=0;o<e.length;o++)"operator"==e[o].type?n[o]=new Operator(e[o].value):n[o]=new Number(e[o].value);r.splice(t[0][0].index,t[0][1].index-t[0][0].index+1),r.splice(t[0][0].index,0,getValue(n)),t=match(r)}return parseInt(r[0].value)}module.exports={evaluate:evaluate};